#!/usr/bin/php 
<?php
/*
 * almajobrun.php
 * 
 */

require_once('vendor/autoload.php');
use Scriptotek\Alma\Client as AlmaClient;
use Scriptotek\Alma\Sru\Client as SruClient;

#--------------------------------------------------------------
# Main Program
#--------------------------------------------------------------

# Read settings from ini file.
print "Reading Configuration settings from file almajob.ini\n";
$config_file = 'almajob.ini';
$config = parse_ini_file($config_file,true);
#$api_key = $config['api_key'];
$api_key_production = $config['api_key_production'];
$api_key_sandbox = $config['api_key_sandbox'];
$domain  = $config['domain'];

#--------------------------------------------------------------
# Read command line options.
#--------------------------------------------------------------

$shortopts = "";
$longopts = array(
    "name:",
    "instance:",
    "env:",
);

$opts = getopt($shortopts, $longopts);
foreach (array_keys($opts) as $opt) switch ($opt) {
    case 'name':
      $name = $opts['name'];
      break;
    case 'env':
      $environment = $opts['env'];
      break;
}

if ( empty($name) || empty($environment) ) {
    print "Usage: \n  almajobrun --env \"{production|sandbox}\" --name \"{Job Name}\"\n\n";
    exit(1);
}

if (($environment != 'production') && ($environment != 'sandbox')) {
    print "Usage: \n  almajobrun --env \"{production|sandbox}\" --name \"{Job Name}\"\n\n";
    exit(1);
}

# Set environment API Key.
if ($environment == "production") {
   $api_key = $api_key_production;
}
if ($environment == "sandbox") {
   $api_key = $api_key_sandbox;
}

# Create Alma Client.
$alma = new AlmaClient($api_key, $domain);

# Array to store the list of current jobs.
$jobs = array();

# File to cache array of jobs.
$jobs_cache = ".cache.jobs.$environment";

# Get List of Jobs either by cache or directly from Alma.
# Cache is set for a number of seconds (60 sec * 1440 min) = 1 day.
if (file_exists($jobs_cache) && (filemtime($jobs_cache) > (time() - 60 * 1440 ))) {
    # Retrieve list of jobs from Cache;
    print "Loading Jobs from Cache...\n";
    $jobs = unserialize(file_get_contents($jobs_cache));
} else {
    # Retrieve current list of jobs from Alma:
    print "Loading Jobs from Alma...\n";
    $alma->jobs->setPaginationLimit( 100 );
    foreach ($alma->jobs as $job) {
        array_push($jobs, array('ID' => $job->id,'NAME' => $job->name, 'DESC' => $job->description, 'LINK' => $job->link));
    } 
    file_put_contents($jobs_cache, serialize($jobs), LOCK_EX);
}

#---------------------------------------------
# Get List of Job Statuses
#---------------------------------------------
$statuses = getJobStatuses($alma);

#---------------------------------------------
# Search for job name in list of jobs.
#---------------------------------------------

#
# Read command line options.
#
$shortopts = "";
$longopts = array(
    "name:",
);

$opts = getopt($shortopts, $longopts);
foreach (array_keys($opts) as $opt) switch ($opt) {
    case 'name':
      $name = $opts['name'];
      break;
}

if (empty($name)) {
    print "Usage: \n  almajobrun --name \"{Job Name}\"\n\n";
    exit(1);
} 

print "Execute Job: $name\n";
$key = searchForName($name, $jobs);

$job_name = "";
$job_id = "";

if ($key) {
   $job_id = $jobs[$key]['ID'];
   $job_name = $jobs[$key]['NAME'];
   print "     Job ID: $job_id\n";

   if ($job_id) {
       #--------------------------------------------------------
       # Execute the job.
       #--------------------------------------------------------
       $job = $alma->jobs[$job_id];
       try {
           $job_instance = $job->submit();
       } catch(Exception $e) {
           print "Unable to execute Job: $job_name\n";
           print $e->getMessage()."\n";
           exit(1);
       }

       # Obtain the JSON response from submitting the job.
       $obj = json_decode($job_instance);

       # Obtain the Instance ID/Information [additional_info]
       #$additional_info = $obj->additional_info;
       $instance_id = basename($obj->additional_info->link);

       # Executed Job was:
       print "Job Instance ID: $instance_id\n";

       # Get Job and Instance Status
       $instance = $job->instances[$instance_id];
       $instance->init();
       $instance_info = json_encode($instance);

       $job_submit_time = zuluToLocal($instance->submit_time);
       $job_start_time = zuluToLocal($instance->start_time);
       print "Job Submited:  $job_submit_time\n";
   }
} else {
   print "Unable to find job name: $name\n";
   exit(1);
}

print "Done.\n";

#-----------------------------------------------------------
# Functions 
#-----------------------------------------------------------

/* 
 * searchForId - Not used - kept for later if needed.
 */
function searchForId($id, $array) {
    foreach ($array as $key => $val) {
       if ($val['ID'] === $id) {
           return $key;
       }
    }
    return null;
}

/*
 * searchForCode
 * 
 * inputs:
 *  $code   - The code we are looking for in the $array.
 *  $array  - The array we are looking in for the $code.
 *
 * output:
 *  $key    - The key to the array for the found code.
 *  null    - If the key is not found.
 */
function searchForCode($code, $array) {
    foreach ($array as $key => $val) {
        if ($val['code'] === $code) {
            return $key;
        }
    }
    return null;
}

/*
 * searchForName - Return the Key of the found Job Name
 *
 * inputs:
 *  $name   - The name of the job we are looking for in the array.
 *  $array  - The array we are looking in for the name.
 *  
 * output:
 *  $key    - The key to the array for the found name.
 *  null    - If the key was not found.
 */
function searchForName($name, $array) {
    foreach ($array as $key => $val) {
       if ($val['NAME'] === $name) {
           return $key;
       }
    }
    return null;
}

/*
 * after - Return the portion string that follows in a given string.
 * 
 * inputs:
 *      $this_in - What string we are looking for (needle).
 *      $inthat  - What string we are looking into (haystack).
 *
 * output:
 *      the string after the $this_in variable.
 */
function after ($this_in, $inthat) {
    if (!is_bool(strpos($inthat, $this_in)))
    return substr($inthat, strpos($inthat,$this_in)+strlen($this_in));
};

/*
 * instanceStatus - Get's the status of the instance.
 * 
 * inputs:
 *      $apikey = The API key used to connect to Alma.
 *      $job_id = The Job ID that the job was submitted under.
 *      $instance_id = The Instance ID that the submitted job returned.
 *
 * output:
 *      status - As defined in the code portion of the codeTable 'systemJobStatus'
 *      null   - If unable to pull the status.
 */
function instanceStatus($apikey,$domain,$job_id, $instance_id)
{
    $j_alma = new AlmaClient($apikey,$domain);
    $j_job = $j_alma->jobs[$job_id];
    $j_instances = $j_job->instances;
    $j_instance_info = $j_instances[$instance_id];
    if ($j_instance_info)
    {
        $j_status = $j_instance_info->status->value;
        return($j_status);
    } else {
        return(null);
    }
}

/*
 * zuluToLocal - Convert Zulu Time to Local Time.
 * 
 * input: 
 *      datetimestamp in Zulu Time zone.
 *
 * output:
 *      datetimestamp in Local Time zone.
 *
 * Note: occationally this function fails due to a microtime issue:
 *   https://stackoverflow.com/questions/53738427/php-error-call-to-a-member-function-settimezone-on-boolean
 *
 */
function zuluToLocal($in)
{
    # Zulu is UTC so create timezone.
    $tz = new DateTimeZone("UTC");
    # Create Date/Time from the format given to UTC.
    $date = DateTime::createFromFormat('Y-m-d\TH:i:s.v\Z', $in, $tz);
    #print_r($date);
    # Convert the timezone to 'America/New_York';
    $date->setTimezone(new DateTimeZone('America/New_York'));
    # Return the Date/Time in local time zone.
    return $date->format('m/d/Y H:i:s.v T');
}

/*
 * getJobStatuses - Pull the 'systemJobStatus' table from Alma. 
 *                  Will cache the list of JobStatuses in a .cache.codetable.systemJobStatus file.
 * 
 * input:
 *      $client     - Alma client handle.
 * 
 * output:
 *      array()     - Array of job statuses with code and description of each status.  
 */
function getJobStatuses ($client)
{
    # CodeTable to pull from Alma.
    # See: https://developers.exlibrisgroup.com/blog/almas-code-tables-api-list-of-code-tables/
    $codetable = "systemJobStatus";

    # Array to store the list of current job statuses:
    $jobstatuses = array();

    # File to cache array of jobs:
    $jobstatuses_cache = ".cache.codetable.$codetable";

    # Get List of Jobs either by cache or directly from Alma.
    if (file_exists($jobstatuses_cache) && (filemtime($jobstatuses_cache) > (time() - 60 * 1440 ))) {
        # Via Cache.
        # Retrieve list of jobs from the file Cache;
        $jobstatuses = unserialize(file_get_contents($jobstatuses_cache));
    } else {
        # Via Alma.
        # Retrieve current list of jobs from Alma directly.
        $ct = $client->codetables->get($codetable);
        $rows = $ct->{'row'};

        # Iterate through the list of job statuses and load into the array.
        #foreach ($rows as $row) {
        #    array_push($jobstatuses, array('code' => $row->{'code'},'description' => $row->{'description'}));
        #}
        foreach ($rows as $row) {
            $jobstatuses[$row->{'code'}] = $row->{'description'};
        }
        
        # Store the array into the cache file.
        file_put_contents($jobstatuses_cache, serialize($jobstatuses), LOCK_EX);
    }

    # Return the array.   
    return($jobstatuses);
}


?>
