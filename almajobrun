#!/usr/bin/php 
<?php
/*
 * almajobrun.php
 * 
 */

require_once('almajob.inc');
require_once('vendor/autoload.php');
use Scriptotek\Alma\Client as AlmaClient;
use Scriptotek\Alma\Sru\Client as SruClient;

#--------------------------------------------------------------
# Main Program
#--------------------------------------------------------------

# Read settings from ini file.
print "Reading Configuration settings from file almajob.ini\n";
$config_file = 'almajob.ini';
$config = parse_ini_file($config_file,true);
$api_key_production = $config['api_key_production'];
$api_key_sandbox = $config['api_key_sandbox'];
$domain  = $config['domain'];

#--------------------------------------------------------------
# Read command line options.
#--------------------------------------------------------------
$shortopts = "";
$longopts = array(
    "name:",
    "instance:",
    "env:",
);

$opts = getopt($shortopts, $longopts);
foreach (array_keys($opts) as $opt) switch ($opt) {
    case 'name':
      $name = $opts['name'];
      break;
    case 'env':
      $environment = $opts['env'];
      break;
}

if ( empty($name) || empty($environment) ) {
    print "Usage: \n  almajobrun --env \"{production|sandbox}\" --name \"{Job Name}\"\n\n";
    exit(1);
}

if (($environment != 'production') && ($environment != 'sandbox')) {
    print "Usage: \n  almajobrun --env \"{production|sandbox}\" --name \"{Job Name}\"\n\n";
    exit(1);
}

# Set environment API Key.
if ($environment == "production") {
   $api_key = $api_key_production;
}
if ($environment == "sandbox") {
   $api_key = $api_key_sandbox;
}

# Create Alma Client.
$alma = new AlmaClient($api_key, $domain);

# Array to store the list of current jobs.
$jobs = array();

# File to cache array of jobs.
$jobs_cache = ".cache.jobs.$environment";

# Get List of Jobs either by cache or directly from Alma.
# Cache is set for a number of seconds (60 sec * 1440 min) = 1 day.
if (file_exists($jobs_cache) && (filemtime($jobs_cache) > (time() - 60 * 1440 ))) {
    # Retrieve list of jobs from Cache;
    print "Loading Jobs from Cache...\n";
    $jobs = unserialize(file_get_contents($jobs_cache));
} else {
    # Retrieve current list of jobs from Alma:
    print "Loading Jobs from Alma...\n";
    $alma->jobs->setPaginationLimit( 100 );
    foreach ($alma->jobs as $job) {
        array_push($jobs, array('ID' => $job->id,'NAME' => $job->name, 'DESC' => $job->description, 'LINK' => $job->link));
    } 
    file_put_contents($jobs_cache, serialize($jobs), LOCK_EX);
}

#---------------------------------------------
# Get List of Job Statuses
#---------------------------------------------
$statuses = getJobStatuses($alma);

#---------------------------------------------
# Read command line options.
#---------------------------------------------
$shortopts = "";
$longopts = array(
    "name:",
);

$opts = getopt($shortopts, $longopts);
foreach (array_keys($opts) as $opt) switch ($opt) {
    case 'name':
      $name = $opts['name'];
      break;
}

if (empty($name)) {
    print "Usage: \n  almajobrun --name \"{Job Name}\"\n\n";
    exit(1);
} 

#--------------------------------------------------------
# Execute the job.
#--------------------------------------------------------
print "Execute Job: $name\n";
$key = searchForName($name, $jobs);

$job_name = "";
$job_id = "";

if ($key) {
   $job_id = $jobs[$key]['ID'];
   $job_name = $jobs[$key]['NAME'];
   print "     Job ID: $job_id\n";

   if ($job_id) {
       # Execute the job.
       $job = $alma->jobs[$job_id];
       try {
           $job_instance = $job->submit();
       } catch(Exception $e) {
           print "Unable to execute Job: $job_name\n";
           print $e->getMessage()."\n";
           exit(1);
       }

       # Obtain the JSON response from submitting the job.
       $obj = json_decode($job_instance);

       # Obtain the Instance ID/Information [additional_info]
       #$additional_info = $obj->additional_info;
       $instance_id = basename($obj->additional_info->link);

       # Executed Job was:
       print "Job Instance ID: $instance_id\n";

       # Get Job and Instance Status
       $instance = $job->instances[$instance_id];
       $instance->init();
       $instance_info = json_encode($instance);

       $job_submit_time = zuluToLocal($instance->submit_time);
       $job_start_time = zuluToLocal($instance->start_time);
       print "Job Submited:  $job_submit_time\n";
   }
} else {
   print "Unable to find job name: $name\n";
   exit(1);
}

print "Done.\n";

?>
